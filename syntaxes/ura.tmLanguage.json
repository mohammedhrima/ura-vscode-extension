{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "ura",
  "scopeName": "source.ura",
  "patterns": [
    { "include": "#comments" },
    { "include": "#strings" },
    { "include": "#characters" },
    { "include": "#numbers" },
    { "include": "#keywords" },
    { "include": "#declarations" },
    { "include": "#library" },
    { "include": "#types" },
    { "include": "#struct_definitions" },
    { "include": "#custom_types" },
    { "include": "#booleans" },
    { "include": "#builtins" },
    { "include": "#operators" },
    { "include": "#functions" },
    { "include": "#variables" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.ura",
          "match": "//.*$"
        },
        {
          "name": "comment.block.ura",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.ura",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.ura",
          "match": "\\\\."
        }
      ]
    },
    "characters": {
      "patterns": [
        {
          "name": "string.quoted.single.ura",
          "match": "'(\\\\.|[^\\\\'])'"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.ura",
          "match": "\\b\\d+\\.\\d+([eE][+-]?\\d+)?\\b"
        },
        {
          "name": "constant.numeric.integer.ura",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.ura",
          "match": "\\b(if|elif|else|while|for|return|break|continue|and|or)\\b"
        }
      ]
    },
    "declarations": {
      "patterns": [
        {
          "name": "keyword.declaration.ura",
          "match": "\\b(struct|func)\\b"
        }
      ]
    },
    "library": {
      "patterns": [
        {
          "name": "keyword.library.ura",
          "match": "\\b(use|protoFunc)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.ura",
          "match": "\\b(int|float|double|char|void|long|short|unsigned|signed|bool|chars)\\b"
        }
      ]
    },
    "struct_definitions": {
      "patterns": [
        {
          "name": "entity.name.type.struct.ura",
          "match": "(?<=\\bstruct\\s+)([A-Z][a-zA-Z0-9_]*)(?=\\s*:)"
        }
      ]
    },
    "custom_types": {
      "patterns": [
        {
          "name": "entity.name.type.ura",
          "match": "\\b([A-Z][a-zA-Z0-9_]*)(?=\\s+[a-z][a-zA-Z0-9_]*\\b)"
        }
      ]
    },
    "booleans": {
      "patterns": [
        {
          "name": "constant.language.boolean.ura",
          "match": "\\b(True|False|NULL)\\b"
        }
      ]
    },
    "builtins": {
      "patterns": [
        {
          "name": "support.function.builtin.ura",
          "match": "\\b(output|input|print|println|malloc|free|sizeof|strlen|strcpy|strcmp|memcpy|memset)\\s*(?=\\()"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arrow.ura",
          "match": "->"
        },
        {
          "name": "keyword.operator.ura",
          "match": "==|!=|<=|>=|\\+|-|\\*|/|%|=|<|>|&&|\\|\\||!"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.ura",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.ura",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?!\\s*\\()"
        }
      ]
    }
  }
}